'use client';

import { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { teamGroups } from '@/lib/config';
import dayjs from 'dayjs';
import { DateRange } from 'react-day-picker';
import { DateRangePickerWithPresets } from '@/components/date-range-picker-with-presets';
import { Skeleton } from '@/components/ui/skeleton';

const adserData: { [key: string]: string[] } = {
    '‡∏™‡∏≤‡∏ß‡∏≠‡πâ‡∏≠‡∏¢': ['Boogey', 'Bubble'],
    '‡∏≠‡∏•‡∏¥‡∏ô': ['Lucifer', 'Risa'],
    '‡∏≠‡∏±‡∏ç‡∏ç‡∏≤ C': ['Shazam', 'Vivien'],
    '‡∏≠‡∏±‡∏ç‡∏ç‡∏≤ D': ['Sim', 'Joanne'],
    'Spezbar': ['Cookie', 'Piea'],
    'Barlance': ['Irene'],
    'Football Area': ['Thomas', 'IU', 'Nolan'],
    'Football Area(Haru)': ['Minho', 'Bailu'],
};

interface AdMetricsRow {
    team_name: string;
    adser: string;
    ad_id: string;
    page_id: string;
    content: string;
    facebook_account: string;
    target_audience: string;
    exclude_audience: string;
    status: string;
    budget: string;
    note: string;
    one_dollar_per_cover: number;
    cpm_cost_per_inquiry: number;
    facebook_cost_per_inquiry: number;
    cost_per_deposit: number;
    total_inquiries: number;
    wasted_inquiries: number;
    net_inquiries: number;
    actual_spend: number;
    registrations: number;
    deposits_count: number;
    new_player_value_thb: number;
    existing_users: number;
    avg_player_value: number;
    silent_inquiries: number;
    repeat_inquiries: number;
    existing_user_inquiries: number;
    spam_inquiries: number;
    blocked_inquiries: number;
    under_18_inquiries: number;
    over_50_inquiries: number;
    foreigner_inquiries: number;
    record_date: Date;
}

const formatNumber = (value: number | string | null, options: Intl.NumberFormatOptions = {}): string => {
    const num = Number(value);
    if (isNaN(num) || value === null) {
        return '-';
    }
    return num.toLocaleString('en-US', options);
};

export default function MonitorPage() {
    const [selectedTeam, setSelectedTeam] = useState<string>('all');
    const [selectedAdser, setSelectedAdser] = useState<string>('all');
    const [availableAdsers, setAvailableAdsers] = useState<string[]>([]);
    const [dateRange, setDateRange] = useState<DateRange | undefined>({
        from: dayjs().startOf('month').toDate(), // <-- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        to: dayjs().endOf('day').toDate(),
    });
    const [data, setData] = useState<AdMetricsRow[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        if (selectedTeam && selectedTeam !== 'all') {
            setAvailableAdsers(adserData[selectedTeam] || []);
        } else {
            const allAdsers = Object.values(adserData).flat();
            setAvailableAdsers([...new Set(allAdsers)]);
        }
        setSelectedAdser('all'); 
    }, [selectedTeam]);

    const fetchData = useCallback(async () => {
        setLoading(true);
        setError('');

        if (!dateRange || !dateRange.from || !dateRange.to) {
            setData([]);
            setLoading(false);
            return;
        }

        const formattedStartDate = dayjs(dateRange.from).format('YYYY-MM-DD');
        const formattedEndDate = dayjs(dateRange.to).format('YYYY-MM-DD');

        const params = new URLSearchParams({
            startDate: formattedStartDate,
            endDate: formattedEndDate,
        });

        if (selectedTeam !== 'all') {
            params.append('team', selectedTeam);
        }
        if (selectedAdser !== 'all') {
            params.append('adser', selectedAdser);
        }

        try {
            const res = await fetch(`/api/monitor?${params.toString()}`);
            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || 'Failed to fetch data');
            }
            const jsonData: AdMetricsRow[] = await res.json();
            setData(jsonData);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    }, [selectedTeam, selectedAdser, dateRange]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const allTeams = Object.values(teamGroups).flat();

    const tableColumns = [
        "Team", "Adser", "ID ‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤", "ID ‡πÄ‡∏û‡∏à", "Content", "Acc Facebook", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", 
        "‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏á‡∏ö‡∏£‡∏±‡∏ô", "Note", "Cover/1$", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡∏Å CPM", 
        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡∏Å ‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏™", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°", "‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡∏Å", "‡∏¢‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢", "‡∏ó‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û", 
        "‡∏á‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", "‡∏™‡∏°‡∏±‡∏Ñ‡∏£", "‡πÄ‡∏ï‡∏¥‡∏°", "‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà(‡∏ø)", "‡∏¢‡∏π‡∏™", "‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡πà‡∏ô", 
        "‡∏ó‡∏±‡∏Å‡πÄ‡∏á‡∏µ‡∏¢‡∏ö", "‡∏ó‡∏±‡∏Å‡∏ã‡πâ‡∏≥", "‡∏°‡∏µ‡∏¢‡∏π‡∏™", "‡∏Å‡πà‡∏≠‡∏Å‡∏ß‡∏ô", "‡∏ö‡∏•‡πá‡∏≠‡∏Å", "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤18", "‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏Å‡∏¥‡∏ô50", "‡∏ï‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ï‡∏¥"
    ];

    const getCellValue = (row: AdMetricsRow, column: string) => {
        switch (column) {
            case "Team": return row.team_name;
            case "Adser": return row.adser;
            case "ID ‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤": return row.ad_id;
            case "ID ‡πÄ‡∏û‡∏à": return row.page_id;
            case "Content": return row.content;
            case "Acc Facebook": return row.facebook_account;
            case "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢": return row.target_audience;
            case "‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢": return row.exclude_audience;
            case "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": return row.status;
            case "‡∏á‡∏ö‡∏£‡∏±‡∏ô": return formatNumber(row.budget);
            case "Note": return row.note;
            case "Cover/1$": return formatNumber(row.one_dollar_per_cover, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            case "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡∏Å CPM": return formatNumber(row.cpm_cost_per_inquiry, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            case "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡∏Å ‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏™": return formatNumber(row.facebook_cost_per_inquiry, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            case "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°": return formatNumber(row.cost_per_deposit, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            case "‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡∏Å": return formatNumber(row.total_inquiries);
            case "‡∏¢‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢": return formatNumber(row.wasted_inquiries);
            case "‡∏ó‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û": return formatNumber(row.net_inquiries);
            case "‡∏á‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ": return formatNumber(row.actual_spend);
            case "‡∏™‡∏°‡∏±‡∏Ñ‡∏£": return formatNumber(row.registrations);
            case "‡πÄ‡∏ï‡∏¥‡∏°": return formatNumber(row.deposits_count);
            case "‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà(‡∏ø)": return formatNumber(row.new_player_value_thb, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            case "‡∏¢‡∏π‡∏™": return formatNumber(row.existing_users);
            case "‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡πà‡∏ô": return formatNumber(row.avg_player_value, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            case "‡∏ó‡∏±‡∏Å‡πÄ‡∏á‡∏µ‡∏¢‡∏ö": return formatNumber(row.silent_inquiries);
            case "‡∏ó‡∏±‡∏Å‡∏ã‡πâ‡∏≥": return formatNumber(row.repeat_inquiries);
            case "‡∏°‡∏µ‡∏¢‡∏π‡∏™": return formatNumber(row.existing_user_inquiries);
            case "‡∏Å‡πà‡∏≠‡∏Å‡∏ß‡∏ô": return formatNumber(row.spam_inquiries);
            case "‡∏ö‡∏•‡πá‡∏≠‡∏Å": return formatNumber(row.blocked_inquiries);
            case "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤18": return formatNumber(row.under_18_inquiries);
            case "‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏Å‡∏¥‡∏ô50": return formatNumber(row.over_50_inquiries);
            case "‡∏ï‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ï‡∏¥": return formatNumber(row.foreigner_inquiries);
            default: return '-';
        }
    };

    return (
        <div className="space-y-6">
            <div>
                <h1 className="text-2xl font-bold tracking-tight">Monitor</h1>
                <p className="text-muted-foreground">
                    ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á)
                </p>
            </div>

            <Card>
                {/* --- üü¢ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏î Padding ‡∏Ç‡∏≠‡∏á Header --- */}
                <CardHeader className="py-4">
                </CardHeader>
                {/* --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç --- */}
                <CardContent>
                    {/* --- üü¢ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Flex Layout ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤ --- */}
                    <div className="flex flex-col sm:flex-row sm:justify-end sm:items-center gap-4">
                        <Select value={selectedTeam} onValueChange={setSelectedTeam}>
                            <SelectTrigger className="w-full sm:w-[180px]">
                                <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="all">‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡∏°</SelectItem>
                                {allTeams.map((team) => (
                                    <SelectItem key={team} value={team}>{team}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>

                        <Select value={selectedAdser} onValueChange={setSelectedAdser}>
                            <SelectTrigger className="w-full sm:w-[180px]">
                                <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Adser" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="all">‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô</SelectItem>
                                {availableAdsers.map((adser) => (
                                    <SelectItem key={adser} value={adser}>{adser}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>

                        <DateRangePickerWithPresets 
                            className="w-full sm:w-auto"
                            initialDateRange={dateRange} 
                            onDateRangeChange={setDateRange} 
                        />
                    </div>
                    {/* --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç --- */}
                </CardContent>
            </Card>

            <Card>
                 {/* --- üü¢ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏î Padding ‡∏Ç‡∏≠‡∏á Header --- */}
                <CardHeader className="py-4">
                    <CardTitle>‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤</CardTitle>
                </CardHeader>
                {/* --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç --- */}
                {loading ? (
                    <div className="p-6">
                        <Skeleton className="h-10 w-full mb-4" />
                        <div className="space-y-2">
                             <Skeleton className="h-10 w-full" />
                             <Skeleton className="h-10 w-full" />
                             <Skeleton className="h-10 w-full" />
                        </div>
                    </div>
                ) : error ? (
                    <div className="p-6 text-red-500 text-center">
                        Error: {error}
                    </div>
                ) : data.length === 0 ? (
                    <div className="p-6 text-muted-foreground text-center">
                        ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    </div>
                ) : (
                    <div className="overflow-x-auto">
                        <Table className="whitespace-nowrap">
                            <TableHeader>
                                <TableRow>
                                    {tableColumns.map((header) => (
                                        <TableHead key={header} className="px-6 w-[150px]">
                                            {header}
                                        </TableHead>
                                    ))}
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {data.map((row, index) => (
                                    <TableRow key={index}>
                                        {tableColumns.map((column) => (
                                            <TableCell key={column} className="px-6">
                                                {getCellValue(row, column)}
                                            </TableCell>
                                        ))}
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </div>
                )}
            </Card>
        </div>
    );
}