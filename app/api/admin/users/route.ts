// app/api/admin/users/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { connection } from '@/lib/db';

export async function GET() {
    const session = await getServerSession(authOptions);
    if (!session) {
        return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }

    try {
        // --- üü¢ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
        // 1. ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö last_seen ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        const [allUsers]: any[] = await connection.execute(
            'SELECT username, last_seen FROM users ORDER BY last_seen DESC'
        );
        // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---

        // 2. Get latest activity logs (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        const [activityLogs]: any[] = await connection.execute(
            `SELECT u.username, a.action, a.created_at 
             FROM activity_logs a 
             JOIN users u ON a.user_id = u.id 
             ORDER BY a.created_at DESC 
             LIMIT 50`
        );

        const data = {
            allUsers, // ‡∏™‡πà‡∏á allUsers ‡πÅ‡∏ó‡∏ô totalUsers ‡πÅ‡∏•‡∏∞ onlineUsers
            activityLogs
        };

        return NextResponse.json(data);
    } catch (error: any) {
        console.error('Error fetching admin user data:', error);
        return NextResponse.json({ message: 'Internal Server Error', error: error.message }, { status: 500 });
    }
}